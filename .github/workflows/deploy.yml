name: Deploy To EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 현재 리포지토리 소스 코드를 러너(우분투 VM)로 체크아웃
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

      # Temurin(Adoptium) 배포판 기준으로 Java17을 설치해야함
      # Gradle/jar 빌드에 필요한 JDK 환경을 세팅
      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # Github Secrets에 저장해둔 문자열(여기서는 APPLICATION_PROPERTIES)을
      # 프로젝트의 src/main/resources/application.yml로 기록한다.
      # 민감정보를 코드에 커밋하지 않고, 런타임에 주입하기 위함이다.
      - name: application.yml 생성
        run: |
          cat > ./src/main/resources/application.yml << 'EOF'
          ${{ secrets.APPLICATION_PROPERTIES }}
          EOF

      # 최초 실행 환경에서 ./gradlew: Permission denied 발생할 수 있음
      - name: Gradle 실행권한 부여
        run: chmod +x ./gradlew

      # Gradle 래퍼로 테스트까지 포함한 빌드를 실행
      # 결과물 JAR는 보통 ./build/libs/ 아래에 생성됨
      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      # 생성된 JAR 중 이름에 SNAPSHOT이 들어간 파일을 project.jar로 변경
      # 이후 서버로 전송할 단일 파일명을 고정하기 위한 단계
      - name: JAR 이름 고정
        run: mv "$(ls build/libs/*.jar | grep -v plain | head -n1)" project.jar

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t itemlytics-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag itemlytics-server ${{ steps.login-ecr.outputs.registry }}/itemlytics-server:latest

      - name: ECR에 Docker 이미지 Push 하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/itemlytics-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipfail
            aws ecr get-login-password --region ap-northeast-2 \
              | docker login --username AWS --password-stdin ${{ steps.login-ecr.outpus.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/itemlytics-server:latest
            docker stop itemlytics-server || true
            docker rm itemlytics-server || true
            docker run -d \
              --name itemlytics-server \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ steps.login-ecr.outputs.registry }}/itemlytics-server:latest